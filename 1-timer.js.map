{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst datetimePicker = document.querySelector(\"#datetime-picker\")\nconst startBtn = document.querySelector(\"button[data-start]\")\nconst daysValue = document.querySelector(\"[data-days]\")\nconst hoursValue = document.querySelector(\"[data-hours]\")\nconst minutesValue = document.querySelector(\"[data-minutes]\")\nconst secondsValue = document.querySelector(\"[data-seconds]\")\nstartBtn.addEventListener(\"click\", handleStart)\nlet timerId = null;\nlet userSelectedDate = null;\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n    onClose(selectedDates) {\n      console.log(selectedDates[0]);\n      const selectedDate = selectedDates[0];\n      if (selectedDate <= new Date()) {\n          iziToast.error({ title: \"Error\", message: \"Please choose a date in the future\" });\n          startBtn.disabled = true;\n      } else {\n          userSelectedDate = selectedDate;\n          startBtn.disabled = false;\n      }\n  },\n};\nflatpickr(datetimePicker, options);\n\nfunction handleStart(event) {\n    \n    timerId = setInterval(() => {\n        const currentTime = Date.now();\n        const deltaTime = userSelectedDate - currentTime;\n        const convertTime = convertMs(deltaTime);\n        updateTimerDisplay(convertTime);\n    }, 1000)\n    \n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\nconst timeConvert = convertMs()\nfunction updateTimerDisplay({ days, hours, minutes, seconds }) {\n    daysValue.textContent = String(days).padStart(2,\"0\");\n    hoursValue.textContent = String(hours).padStart(2,\"0\");\n    minutesValue.textContent = String(minutes).padStart(2,\"0\");\n    secondsValue.textContent = String(seconds).padStart(2,\"0\");\n}\n\n"],"names":["datetimePicker","startBtn","daysValue","hoursValue","minutesValue","secondsValue","handleStart","userSelectedDate","options","selectedDates","selectedDate","iziToast","flatpickr","event","currentTime","deltaTime","convertTime","convertMs","updateTimerDisplay","ms","days","hours","minutes","seconds"],"mappings":"iyBAMA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAC5DJ,EAAS,iBAAiB,QAASK,CAAW,EAE9C,IAAIC,EAAmB,KACvB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACf,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EAC5B,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACpBC,EAAS,MAAM,CAAE,MAAO,QAAS,QAAS,oCAAoC,CAAE,EAChFV,EAAS,SAAW,KAEpBM,EAAmBG,EACnBT,EAAS,SAAW,GAE3B,CACH,EACAW,EAAUZ,EAAgBQ,CAAO,EAEjC,SAASF,EAAYO,EAAO,CAEd,YAAY,IAAM,CACxB,MAAMC,EAAc,KAAK,MACnBC,EAAYR,EAAmBO,EAC/BE,EAAcC,EAAUF,CAAS,EACvCG,EAAmBF,CAAW,CACjC,EAAE,GAAI,CAEX,CAEA,SAASC,EAAUE,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASL,EAAmB,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC3DrB,EAAU,YAAc,OAAOkB,CAAI,EAAE,SAAS,EAAE,GAAG,EACnDjB,EAAW,YAAc,OAAOkB,CAAK,EAAE,SAAS,EAAE,GAAG,EACrDjB,EAAa,YAAc,OAAOkB,CAAO,EAAE,SAAS,EAAE,GAAG,EACzDjB,EAAa,YAAc,OAAOkB,CAAO,EAAE,SAAS,EAAE,GAAG,CAC7D"}